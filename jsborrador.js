window.onload = function () {

	const TOPEDERECHA = 400;
	const TOPEABAJO = 700;
	const POSICIONPJ = 100; // Posici칩n Y del personaje durante la partida
	const ANCHOPJ = 35; // Aunque el sprite mide 40 p칤xeles, definir el ancho del personaje en 35 p칤xeles ayuda a conseguir una mejor coherencia visual en lo relativo a las colisiones
	const ALTOPJ = 40;
	const ANCHOENEMIGO = 25;
	const ALTOENEMIGO = 25;
	const VELOCIDADPJ = 2.6;
	const ENEMIGOSMINIMOS = 750;
	const ENEMIGOSMAXIMOS = 1500;
	const NUMENEMIGOS = ENEMIGOSMINIMOS + Math.round(Math.random() * (ENEMIGOSMAXIMOS - ENEMIGOSMINIMOS));
	let enemigosRestantes = NUMENEMIGOS; // esta variable la usamos para evitar provocar fallos buscando en posiciones del array "enemigos" que ya no existen porque hemos borrado alg칰n elemento
	const PROFUNDIDADENEMIGOS = 100000;
	let enemigos = [];
	let vidas = 3;
	let puntuacion = 0;
	let invencibilidad = false;
	let posicionX, posicionY, velocidadEnemigoX, velocidadEnemigoY;

	//lineas 15 a 58: personaje
	let x = TOPEDERECHA / 2 - (ANCHOPJ / 2);        // posici칩n inicial x del personaje
	let y = POSICIONPJ;      // posici칩n y del personaje (en principio, invariable)
	let canvas;     // variable que referencia al elemento canvas del html
	let ctx;        // contexto de trabajo
	let idPintar;

	let xDerecha;
	let xIzquierda;

	let posicion = 0;   // Posici칩n del array 0, 1
	let ejecutarDerecha = true;

	let miPersonaje;
	let imagen; // en principio tendremos en una sola imagen tanto sprites del personaje como de los enemigos. Puede variar m치s adelante

	function Personaje(x, y) {

		this.x = x;
		this.y = y;
		this.velocidadPJ = VELOCIDADPJ;
		this.animacionPJ = [[0, 0], [40, 0], [80, 0], [120, 0], [160, 0]]; // Por orden: manos arriba, cayendo izquierda, cayendo derecha, disparando izquierda, disparando derecha
		this.tama침oX = 40;
		this.tama침oY = 40;

	}

	Personaje.prototype.generaPosicionDerecha = function () {

		this.x = this.x + this.velocidadPJ;

		if (this.x > (TOPEDERECHA - ANCHOPJ)) {
			this.x = TOPEDERECHA - ANCHOPJ;
		}
	}

	Personaje.prototype.generaPosicionIzquierda = function () {

		this.x = this.x - this.velocidadPJ;

		// -8 en lugar de -0 para que el personaje visualmente se encuentre m치s cerca de los l칤mites del canvas
		if (this.x < (-8)) {
			this.x = (-8);
		}
	}

	//lineas 61 a : enemigos
	function Enemigo(x, y, velocidadX, velocidadY) {
		this.x = x;
		this.y = y;
		this.velocidadX = velocidadX;
		this.velocidadY = velocidadY;
	}

	function generarEnemigos() {
		for (let i = 0; i < NUMENEMIGOS; i++) {
			posicionX = Math.round(Math.random() * (TOPEDERECHA - ANCHOENEMIGO));
			posicionY = TOPEABAJO + Math.round(Math.random() * (PROFUNDIDADENEMIGOS - TOPEABAJO));
			velocidadEnemigoX = (Math.random() - 0.5) * 3;
			velocidadEnemigoY = 2; // todos los enemigos parten de la misma velocidad Y inicial.
			enemigos[i] = new Enemigo(posicionX, posicionY, velocidadEnemigoX, velocidadEnemigoY);
		}
	}

	document.getElementById("inicioJuego").onclick = iniciarJuego;

	function iniciarJuego() {
		idPintar = setInterval(pintar, 1000 / 120);
		invencibilidad = false;
		idQuitarInvencibilidad = setInterval(quitarInvencibilidad, 1700);
		generarEnemigos();
		enemigosRestantes = NUMENEMIGOS;
		vidas = 3;
		puntuacion = 0;
		miPersonaje.x = TOPEDERECHA / 2 - (ANCHOPJ / 2);
		posicion = 0;
	}

	function quitarInvencibilidad() {
		invencibilidad = false;
	}

	function pintar() {

		document.getElementById('inicioJuego').style.visibility = 'hidden';

		// borramos el canvas
		ctx.clearRect(0, 0, TOPEDERECHA, TOPEABAJO);

		if (xDerecha) {
			miPersonaje.generaPosicionDerecha();
		}

		if (xIzquierda) {
			miPersonaje.generaPosicionIzquierda();
		}

		// Pintamos al personaje
		ctx.drawImage(miPersonaje.imagen, // Imagen completa con todos los personajes (Sprite)
			miPersonaje.animacionPJ[posicion][0],    // Posicion X del sprite donde se encuentra el comecocos que voy a recortar del sprite para dibujar
			miPersonaje.animacionPJ[posicion][1],	  // Posicion Y del sprite donde se encuentra el comecocos que voy a recortar del sprite para dibujar
			miPersonaje.tama침oX, 		    // Tama침o X del comecocos que voy a recortar para dibujar
			miPersonaje.tama침oY,	        // Tama침o Y del comecocos que voy a recortar para dibujar
			miPersonaje.x,                // Posicion x de pantalla donde voy a dibujar el comecocos recortado
			miPersonaje.y,				            // Posicion y de pantalla donde voy a dibujar el comecocos recortado
			miPersonaje.tama침oX,		    // Tama침o X del comecocos que voy a dibujar
			miPersonaje.tama침oY);         // Tama침o Y del comecocos que voy a dibujar					  

		for (let i = 0; i < enemigosRestantes; i++) {
			ctx.fillRect(enemigos[i].x, enemigos[i].y, ALTOENEMIGO, ANCHOENEMIGO);
			ctx.fillStyle = "black";
			enemigos[i].x += enemigos[i].velocidadX;
			if (enemigos[i].x <= 0) { // toca pared de la izquierda
				enemigos[i].velocidadX = Math.abs(enemigos[i].velocidadX);
			}
			if (enemigos[i].x >= TOPEDERECHA - ANCHOENEMIGO) { // toca pared de la derecha
				enemigos[i].velocidadX = -Math.abs(enemigos[i].velocidadX);
			}
			enemigos[i].y -= enemigos[i].velocidadY;
			enemigos[i].velocidadY += 0.0001; // Incremento de dificultad lento y progresivo. Aunque velocidadY no tiene un l칤mite establecido, la partida acabar치 cuando dejen de salir enemigos, y en ese punto, la dificultad me parece apropiada.
			if (enemigos[i].y <= 0 - (ALTOENEMIGO + 2)) { // vamos vaciando el array "enemigos" por optimizaci칩n y por tener una manera de saber cu치ndo se ha superado el juego. "+ 2" para que no se llegue a ver el 칰ltimo cuadrado en pantalla.
				enemigos.splice(i, 1);
				enemigosRestantes--;
				puntuacion++;
			}

			if (invencibilidad == false) {
				// lado derecho del PJ es mayor que el lado izquierdo del enemigo, lado izquierdo del PJ es menor que el lado derecho del enemigo, lado superior del PJ es mayor que el lado inferior del enemigo, lado inferior del PJ es menor que el lado superior del enemigo
				if ((miPersonaje.x + ANCHOPJ) >= enemigos[i].x && (miPersonaje.x + 8) <= (enemigos[i].x + ANCHOENEMIGO) && miPersonaje.y <= (enemigos[i].y + ALTOENEMIGO) && (miPersonaje.y + ALTOPJ - 3) >= enemigos[i].y) {
					vidas--;
					invencibilidad = true;
				}
			}
		}

		document.getElementById("MensajeSuperior").innerHTML = "Puntuaci칩n: " + puntuacion + "</br>Vidas: " + vidas; // La puntuaci칩n aumenta en 1 por cada enemigo superado (es decir, que sale de la pantalla por la parte superior). Como el n칰mero de enemigos puede variar en cada intento, al superar el juego se establecer치 autom치ticamente la puntuaci칩n m치xima (10000).

		if (vidas == 0 || enemigos.length == 0) {
			document.getElementById('inicioJuego').style.visibility = 'visible';

			if (enemigos.length == 0) {
				puntuacion = 10000;
				document.getElementById("MensajeSuperior").innerHTML = "Puntuaci칩n: " + puntuacion;
				document.getElementById("MensajeInferior").innerHTML = "춰Enhorabuena! Has completado el juego. Vidas restantes: " + vidas;
			}

			if (vidas == 0) {
				document.getElementById("MensajeInferior").innerHTML = "Fin del juego 游눖";
			}

			clearInterval(idPintar);
			clearInterval(idQuitarInvencibilidad);

		}
	}

	/*
		function activarSpriteDerecha() {
	
			if (!ejecutarDerecha) posicion = 0;
	
			ejecutarDerecha = true;
		}
	
		function activarSpriteIzquierda() {
	
			if (ejecutarDerecha) posicion = 2;
	
			ejecutarDerecha = false;
		}
	
		function activarSpriteAbajo() {
	
			if (!ejecutarAbajo) posicion = 4;
	
			ejecutarAbajo = true;
		}
	
		function activarSpriteArriba() {
	
			if (ejecutarAbajo) posicion = 6;
	
			ejecutarAbajo = false;
		}
	*/

	function activaMovimiento(evt) {

		switch (evt.keyCode) {

			// Left arrow.
			case 37:
				xIzquierda = true;
				posicion = 1;
				break;

			// Right arrow.
			case 39:
				xDerecha = true;
				posicion = 2;
				break;

		}
	}

	function desactivaMovimiento(evt) {

		switch (evt.keyCode) {


			// Left arrow.
			case 37:
				xIzquierda = false;
				break;

			// Right arrow.
			case 39:
				xDerecha = false;
				break;

		}

	}

	document.addEventListener("keydown", activaMovimiento, false);
	document.addEventListener("keyup", desactivaMovimiento, false);

	// localizamos el canvas
	canvas = document.getElementById("miCanvas");

	// Generamos el contexto de trabajo
	ctx = canvas.getContext("2d");

	imagen = new Image();
	imagen.src = "SpritePersonaje40.png";
	Personaje.prototype.imagen = imagen;

	miPersonaje = new Personaje(x, y);

}

/*
Cr칠ditos a los autores de los modelos utilizados en el sprite: "Authors: bluecarrot16, Benjamin K. Smith (BenCreating), Evert, Eliza Wyatt (ElizaWy), TheraHedwig, MuffinElZangano, Durrani, Johannes Sj?lund (wulax), Stephen Challener (Redshrike), Manuel Riecke (MrBeast), Joe White, David Conway Jr. (JaidynReiman), Johannes Sj칬lund (wulax), Matthew Krohn (makrohn), drjamgo@hotmail.com".
*/